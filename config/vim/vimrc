" automatic indentation
set autoindent
" reread file if it has been modified outside of Vim
set autoread
" set window background to dark
set background=dark
" more powerful backspacing
set backspace=indent,eol,start
" enter the current millennium
set nocompatible
set completeopt=menu,menuone,noselect
" enable cursor line
set cursorline
" disable annoying error bell
set noerrorbells
set expandtab
set fo+=jpor
" enable folding
set nofoldenable
set foldmethod=indent
" allow hidden buffers
set hidden
set history=500
" ignore case unless explicitly stated
set ignorecase
" incremental search
set incsearch
set laststatus=2
set list
set listchars=
set magic
" show line numbers
set number
" basic completion
set omnifunc=syntaxcomplete#Complete
set path+=.,**
set pumheight=15
" show relative line numbers
set relativenumber
" show cursor position in status bar
set ruler
" 8 lines above or below cursor when scrolling
set scrolloff=8
" indents to next multiple of 'shiftwidth'.
set shiftwidth=2
set shiftround
set noshowmode
" show typed command in status bar
set showcmd
set signcolumn=yes
set smartcase
" set tabs to two spaces
set tabstop=2
set termguicolors
" show file in titlebar
set title
set ttimeout
set ttimeoutlen=5
" set updatetime to 200 milliseconds
set updatetime=200
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
set novisualbell
set wildmenu
set wildmode=longest:full,full
" don't wrap lines
set nowrap

colorscheme quiet
highlight clear SignColumn

" keybindings

" change map leader to space
let mapleader=" "

" line/selection movement binds
" alt + k to move a line or selection up,
" alt + j to move a line or selection down
" amazing vim hack taken from the wiki:
" https://vim.fandom.com/wiki/Moving_lines_up_or_down#:~:text=In%20normal%20mode%20or%20in,to%20move%20the%20block%20up.
nnoremap <silent> <A-j> :m .+1<CR>==
nnoremap <silent> <A-k> :m .-2<CR>==
inoremap <silent> <A-j> <Esc>:m .+1<CR>==gi
inoremap <silent> <A-k> <Esc>:m .-2<CR>==gi
vnoremap <silent> <A-j> :m '>+1<CR>gv=gv
vnoremap <silent> <A-k> :m '<-2<CR>gv=gv

" buffer stuff
" switch buffers easily
nnoremap <leader><leader> :set nomore <Bar> echo ":buffers" <Bar> :ls <Bar> :set more <CR>:b<Space>
nnoremap <Leader>n :enew<CR>
nnoremap <Leader>q :bd<CR>


nnoremap <leader>cd :cd %:p:h <Bar> echo getcwd()<CR>


nnoremap Y y$
nnoremap <C-L> <Cmd>nohlsearch<Bar>diffupdate<Bar>normal! <C-L><CR>
inoremap <C-U> <C-G>u<C-U>
inoremap <C-W> <C-G>u<C-W>
xnoremap * y/\V<C-R>"<CR>
xnoremap # y?\V<C-R>"<CR>
nnoremap & :&&<CR>



" vim plug
let data_dir = '~/.config/vim/'
if empty(glob(data_dir . '/autoload/plug.vim'))
  :echo "Installing Vim Plug"
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  :echo "Vim Plug installed"
endif

call plug#begin('~/.config/vim/plug')
" file explorer
Plug 'justinmk/vim-dirvish'
Plug 'tpope/vim-unimpaired'
" show git changes in gutter
Plug 'airblade/vim-gitgutter'
Plug 'romainl/vim-cool'
" Vim Surround
Plug 'tpope/vim-surround'
" Vim Commentary
Plug 'tpope/vim-commentary'
" Goyo
Plug 'junegunn/goyo.vim', {'on': 'Goyo'}
" colored parantheses
Plug 'junegunn/rainbow_parentheses.vim'
Plug 'tpope/vim-repeat'
Plug 'junegunn/fzf.vim'
call plug#end()

" enable RainbowParentheses
augroup rainbow_parens
  autocmd!
  autocmd VimEnter * RainbowParentheses
augroup end

" FZF configurations

" open FZF file search when ctrl + p is pressed
nnoremap <leader>ff :Files<CR>
" open FZF ripgrep search when ctrl + t is pressed
nnoremap <leader>fg :Rg<CR>


nnoremap <leader>z :Goyo<CR>
