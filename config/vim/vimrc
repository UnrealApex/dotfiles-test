set autoindent
set autoread
set background=dark
set backspace=indent,eol,start
set backupdir=$XDG_DATA_HOME/vim/backup
set belloff=all
set complete-=i
set completeopt=menu,menuone,noselect
set cursorline
set directory=$XDG_DATA_HOME/vim/swap
set fo+=jpor
set foldenable
set foldmethod=indent
set formatoptions=jcroqlnt
set grepformat="%f:%l:%c:%m"
" TODO: set errorformat
set grepprg="rg --vimgrep"
set guicursor=""
set hidden
set history=10000
set hlsearch
set ignorecase
set incsearch
set laststatus=1
set magic
set nofoldenable
set novisualbell
set nowrap
set number
set omnifunc=syntaxcomplete#Complete
set packpath^=$XDG_DATA_HOME/vim
set path+=.,,
set pumheight=12
set relativenumber
set rtp+=$XDG_DATA_HOME/vim
set ruler
set scrolloff=8
set shortmess=ltToOCFc
set showcmd
set showmode
set signcolumn="1"
set smartcase
set splitright
set tabpagemax=50
set tabstop=4
set tags="./tags;,tags"
set title
set ttimeout
set ttimeoutlen=5
set undodir=$XDG_DATA_HOME/vim/undo
set undofile
set undolevels=500
set updatetime=200
set viewoptions="unix,slash"
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
set wildmenu
set wildmode=longest:full,full
set wildoptions=pum,tagfile

syntax on
filetype plugin indent on

" create paths for directories set
if !isdirectory(&backupdir)
		call mkdir(&backupdir, "p", 0700)
endif

if !isdirectory(&directory)
		call mkdir(&directory, "p", 0700)
endif

if !isdirectory(&undodir)
		call mkdir(&undodir, "p", 0700)
endif

highlight clear SignColumn

" redundant if vim is compiled without these features
" " disable Python 2 support.
" let g:loaded_python_provider = 0
" " disable Ruby support.
" let g:loaded_ruby_provider = 0
" " disable nodeJS support.
" let g:loaded_node_provider = 0
" " disable Perl support
" let g:loaded_perl_provider = 0

" disable extra plugins
let g:loaded_2html_plugin = 1
let g:loaded_getscript = 1
let g:loaded_getscriptPlugin = 1
let g:loaded_gzip = 1
let g:loaded_netrw = 1
let g:loaded_netrwFileHandlers = 1
let g:loaded_netrwPlugin = 1
let g:loaded_netrwSettings = 1
let g:loaded_remote_plugins =  1
let g:loaded_rrhelper = 1
let g:loaded_tar = 1
let g:loaded_tarPlugin = 1
let g:loaded_tutor_mode_plugin = 1
let g:loaded_vimball = 1
let g:loaded_vimballPlugin = 1
let g:loaded_zip = 1
let g:loaded_zipPlugin = 1
let g:netrw_nogx = 1

let g:mucomplete#enable_auto_at_startup = 1
let g:mucomplete#completion_delay = 100

" keybindings

" change map leader to space
let mapleader=" "

packadd comment
packadd matchit
packadd editorconfig

function! PackInit() abort
		packadd minpac

		" bootstrap minpac
		if !exists('g:loaded_minpac')
				let out = system('git clone https://github.com/k-takata/minpac '
						\ .. $XDG_DATA_HOME .. '/vim/pack/minpac/opt/minpac')
				if v:shell_error
						echo 'Error cloning minpac: ' .. out
						return
				endif
				packadd minpac
		endif

		call minpac#init()
		call minpac#add('k-takata/minpac', {'type': 'opt'})
		call minpac#add('tpope/vim-unimpaired')
		call minpac#add('airblade/vim-gitgutter')
		call minpac#add('romainl/vim-cool')
		call minpac#add('tpope/vim-surround')
		call minpac#add('junegunn/rainbow_parentheses.vim')
		call minpac#add('tpope/vim-repeat')
		call minpac#add('wellle/targets.vim')
		call minpac#add('lifepillar/vim-mucomplete')
endfunction

command! PackUpdate source $MYVIMRC | call PackInit() | call minpac#update()
command! PackClean  source $MYVIMRC | call PackInit() | call minpac#clean()
command! PackStatus packadd minpac | call minpac#status()

augroup rainbow_parens
		autocmd!
		autocmd BufReadPost * RainbowParentheses
augroup end

nnoremap <leader><leader> :set nomore <Bar> echo ":buffers" <Bar> :ls <Bar> :set more <CR>:b<Space>
nnoremap <leader>n :enew<CR>
nnoremap <leader>q :bd<CR>
nnoremap <leader>cd :cd %:p:h <Bar> echo getcwd()<CR>
nnoremap Y y$
nnoremap <C-L> <Cmd>nohlsearch<Bar>diffupdate<Bar>normal! <C-L><CR>
inoremap <C-U> <C-G>u<C-U>
inoremap <C-W> <C-G>u<C-W>
xnoremap * y/\V<C-R>"<CR>
xnoremap # y?\V<C-R>"<CR>
nnoremap & :&&<CR>

" fzf.vim must be in runtimepath
nnoremap <leader>ff :FZF<CR>

nnoremap <leader>n :enew<CR>

" switch tabs quickly
nnoremap <leader>1 1gt<CR>
nnoremap <leader>2 2gt<CR>
nnoremap <leader>3 3gt<CR>
nnoremap <leader>4 4gt<CR>
nnoremap <leader>5 5gt<CR>
nnoremap <leader>6 6gt<CR>
nnoremap <leader>7 7gt<CR>
nnoremap <leader>8 8gt<CR>
nnoremap <leader>9 9gt<CR>

nnoremap <leader>t :tabnew<CR>
nnoremap <leader>x :tabclose<CR>

" resize splits with ctrl + arrows
nnoremap <C-Up> :resize -2<CR>
nnoremap <C-Down> :resize +2<CR>
nnoremap <C-Left> :vertical resize +2<CR>
nnoremap <C-Right> :vertical resize -2<CR>

" don't lose selection when shifting text
xnoremap < <gv
xnoremap > >gv

nnoremap gx :silent !xdg-open <cfile><CR>

omap ih <Plug>(GitGutterTextObjectInnerPending)
omap ah <Plug>(GitGutterTextObjectOuterPending)
xmap ih <Plug>(GitGutterTextObjectInnerVisual)
xmap ah <Plug>(GitGutterTextObjectOuterVisual)
